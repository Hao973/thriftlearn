/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StudentServ_H
#define StudentServ_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "student_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StudentServIf {
 public:
  virtual ~StudentServIf() {}
  virtual void work_score(sturesult& _return, const student& stu) = 0;
};

class StudentServIfFactory {
 public:
  typedef StudentServIf Handler;

  virtual ~StudentServIfFactory() {}

  virtual StudentServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StudentServIf* /* handler */) = 0;
};

class StudentServIfSingletonFactory : virtual public StudentServIfFactory {
 public:
  StudentServIfSingletonFactory(const boost::shared_ptr<StudentServIf>& iface) : iface_(iface) {}
  virtual ~StudentServIfSingletonFactory() {}

  virtual StudentServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StudentServIf* /* handler */) {}

 protected:
  boost::shared_ptr<StudentServIf> iface_;
};

class StudentServNull : virtual public StudentServIf {
 public:
  virtual ~StudentServNull() {}
  void work_score(sturesult& /* _return */, const student& /* stu */) {
    return;
  }
};

typedef struct _StudentServ_work_score_args__isset {
  _StudentServ_work_score_args__isset() : stu(false) {}
  bool stu :1;
} _StudentServ_work_score_args__isset;

class StudentServ_work_score_args {
 public:

  StudentServ_work_score_args(const StudentServ_work_score_args&);
  StudentServ_work_score_args& operator=(const StudentServ_work_score_args&);
  StudentServ_work_score_args() {
  }

  virtual ~StudentServ_work_score_args() throw();
  student stu;

  _StudentServ_work_score_args__isset __isset;

  void __set_stu(const student& val);

  bool operator == (const StudentServ_work_score_args & rhs) const
  {
    if (!(stu == rhs.stu))
      return false;
    return true;
  }
  bool operator != (const StudentServ_work_score_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StudentServ_work_score_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StudentServ_work_score_pargs {
 public:


  virtual ~StudentServ_work_score_pargs() throw();
  const student* stu;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StudentServ_work_score_result__isset {
  _StudentServ_work_score_result__isset() : success(false) {}
  bool success :1;
} _StudentServ_work_score_result__isset;

class StudentServ_work_score_result {
 public:

  StudentServ_work_score_result(const StudentServ_work_score_result&);
  StudentServ_work_score_result& operator=(const StudentServ_work_score_result&);
  StudentServ_work_score_result() {
  }

  virtual ~StudentServ_work_score_result() throw();
  sturesult success;

  _StudentServ_work_score_result__isset __isset;

  void __set_success(const sturesult& val);

  bool operator == (const StudentServ_work_score_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StudentServ_work_score_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StudentServ_work_score_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StudentServ_work_score_presult__isset {
  _StudentServ_work_score_presult__isset() : success(false) {}
  bool success :1;
} _StudentServ_work_score_presult__isset;

class StudentServ_work_score_presult {
 public:


  virtual ~StudentServ_work_score_presult() throw();
  sturesult* success;

  _StudentServ_work_score_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StudentServClient : virtual public StudentServIf {
 public:
  StudentServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StudentServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void work_score(sturesult& _return, const student& stu);
  void send_work_score(const student& stu);
  void recv_work_score(sturesult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StudentServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StudentServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StudentServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_work_score(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StudentServProcessor(boost::shared_ptr<StudentServIf> iface) :
    iface_(iface) {
    processMap_["work_score"] = &StudentServProcessor::process_work_score;
  }

  virtual ~StudentServProcessor() {}
};

class StudentServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StudentServProcessorFactory(const ::boost::shared_ptr< StudentServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StudentServIfFactory > handlerFactory_;
};

class StudentServMultiface : virtual public StudentServIf {
 public:
  StudentServMultiface(std::vector<boost::shared_ptr<StudentServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StudentServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StudentServIf> > ifaces_;
  StudentServMultiface() {}
  void add(boost::shared_ptr<StudentServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void work_score(sturesult& _return, const student& stu) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->work_score(_return, stu);
    }
    ifaces_[i]->work_score(_return, stu);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StudentServConcurrentClient : virtual public StudentServIf {
 public:
  StudentServConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StudentServConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void work_score(sturesult& _return, const student& stu);
  int32_t send_work_score(const student& stu);
  void recv_work_score(sturesult& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
