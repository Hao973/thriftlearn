/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef student_TYPES_H
#define student_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class subjectscore;

class student;

class sturesult;


class subjectscore : public virtual ::apache::thrift::TBase {
 public:

  subjectscore(const subjectscore&);
  subjectscore& operator=(const subjectscore&);
  subjectscore() : str_subject(), i_score(0) {
  }

  virtual ~subjectscore() throw();
  std::string str_subject;
  int32_t i_score;

  void __set_str_subject(const std::string& val);

  void __set_i_score(const int32_t val);

  bool operator == (const subjectscore & rhs) const
  {
    if (!(str_subject == rhs.str_subject))
      return false;
    if (!(i_score == rhs.i_score))
      return false;
    return true;
  }
  bool operator != (const subjectscore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const subjectscore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(subjectscore &a, subjectscore &b);

inline std::ostream& operator<<(std::ostream& out, const subjectscore& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _student__isset {
  _student__isset() : list_subscores(false), str_sex(false) {}
  bool list_subscores :1;
  bool str_sex :1;
} _student__isset;

class student : public virtual ::apache::thrift::TBase {
 public:

  student(const student&);
  student& operator=(const student&);
  student() : i_uid(0), str_name(), str_sex() {
  }

  virtual ~student() throw();
  std::vector<subjectscore>  list_subscores;
  int32_t i_uid;
  std::string str_name;
  std::string str_sex;

  _student__isset __isset;

  void __set_list_subscores(const std::vector<subjectscore> & val);

  void __set_i_uid(const int32_t val);

  void __set_str_name(const std::string& val);

  void __set_str_sex(const std::string& val);

  bool operator == (const student & rhs) const
  {
    if (__isset.list_subscores != rhs.__isset.list_subscores)
      return false;
    else if (__isset.list_subscores && !(list_subscores == rhs.list_subscores))
      return false;
    if (!(i_uid == rhs.i_uid))
      return false;
    if (!(str_name == rhs.str_name))
      return false;
    if (__isset.str_sex != rhs.__isset.str_sex)
      return false;
    else if (__isset.str_sex && !(str_sex == rhs.str_sex))
      return false;
    return true;
  }
  bool operator != (const student &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const student & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(student &a, student &b);

inline std::ostream& operator<<(std::ostream& out, const student& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _sturesult__isset {
  _sturesult__isset() : str_sex(false) {}
  bool str_sex :1;
} _sturesult__isset;

class sturesult : public virtual ::apache::thrift::TBase {
 public:

  sturesult(const sturesult&);
  sturesult& operator=(const sturesult&);
  sturesult() : i_uid(0), str_name(), str_sex(), i_subscore(0), i_avescore(0), str_maxsub(), str_mixsub() {
  }

  virtual ~sturesult() throw();
  int32_t i_uid;
  std::string str_name;
  std::string str_sex;
  int32_t i_subscore;
  int32_t i_avescore;
  std::string str_maxsub;
  std::string str_mixsub;

  _sturesult__isset __isset;

  void __set_i_uid(const int32_t val);

  void __set_str_name(const std::string& val);

  void __set_str_sex(const std::string& val);

  void __set_i_subscore(const int32_t val);

  void __set_i_avescore(const int32_t val);

  void __set_str_maxsub(const std::string& val);

  void __set_str_mixsub(const std::string& val);

  bool operator == (const sturesult & rhs) const
  {
    if (!(i_uid == rhs.i_uid))
      return false;
    if (!(str_name == rhs.str_name))
      return false;
    if (__isset.str_sex != rhs.__isset.str_sex)
      return false;
    else if (__isset.str_sex && !(str_sex == rhs.str_sex))
      return false;
    if (!(i_subscore == rhs.i_subscore))
      return false;
    if (!(i_avescore == rhs.i_avescore))
      return false;
    if (!(str_maxsub == rhs.str_maxsub))
      return false;
    if (!(str_mixsub == rhs.str_mixsub))
      return false;
    return true;
  }
  bool operator != (const sturesult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sturesult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(sturesult &a, sturesult &b);

inline std::ostream& operator<<(std::ostream& out, const sturesult& obj)
{
  obj.printTo(out);
  return out;
}



#endif
