/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "student_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




subjectscore::~subjectscore() throw() {
}


void subjectscore::__set_str_subject(const std::string& val) {
  this->str_subject = val;
}

void subjectscore::__set_i_score(const int32_t val) {
  this->i_score = val;
}

uint32_t subjectscore::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_str_subject = false;
  bool isset_i_score = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_subject);
          isset_str_subject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i_score);
          isset_i_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_str_subject)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_i_score)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t subjectscore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("subjectscore");

  xfer += oprot->writeFieldBegin("str_subject", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->str_subject);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("i_score", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i_score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(subjectscore &a, subjectscore &b) {
  using ::std::swap;
  swap(a.str_subject, b.str_subject);
  swap(a.i_score, b.i_score);
}

subjectscore::subjectscore(const subjectscore& other0) {
  str_subject = other0.str_subject;
  i_score = other0.i_score;
}
subjectscore& subjectscore::operator=(const subjectscore& other1) {
  str_subject = other1.str_subject;
  i_score = other1.i_score;
  return *this;
}
void subjectscore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "subjectscore(";
  out << "str_subject=" << to_string(str_subject);
  out << ", " << "i_score=" << to_string(i_score);
  out << ")";
}


student::~student() throw() {
}


void student::__set_list_subscores(const std::vector<subjectscore> & val) {
  this->list_subscores = val;
__isset.list_subscores = true;
}

void student::__set_i_uid(const int32_t val) {
  this->i_uid = val;
}

void student::__set_str_name(const std::string& val) {
  this->str_name = val;
}

void student::__set_str_sex(const std::string& val) {
  this->str_sex = val;
__isset.str_sex = true;
}

uint32_t student::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_i_uid = false;
  bool isset_str_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->list_subscores.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->list_subscores.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->list_subscores[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.list_subscores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i_uid);
          isset_i_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_name);
          isset_str_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_sex);
          this->__isset.str_sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_i_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_str_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t student::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("student");

  if (this->__isset.list_subscores) {
    xfer += oprot->writeFieldBegin("list_subscores", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->list_subscores.size()));
      std::vector<subjectscore> ::const_iterator _iter7;
      for (_iter7 = this->list_subscores.begin(); _iter7 != this->list_subscores.end(); ++_iter7)
      {
        xfer += (*_iter7).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("i_uid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->i_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->str_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.str_sex) {
    xfer += oprot->writeFieldBegin("str_sex", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->str_sex);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(student &a, student &b) {
  using ::std::swap;
  swap(a.list_subscores, b.list_subscores);
  swap(a.i_uid, b.i_uid);
  swap(a.str_name, b.str_name);
  swap(a.str_sex, b.str_sex);
  swap(a.__isset, b.__isset);
}

student::student(const student& other8) {
  list_subscores = other8.list_subscores;
  i_uid = other8.i_uid;
  str_name = other8.str_name;
  str_sex = other8.str_sex;
  __isset = other8.__isset;
}
student& student::operator=(const student& other9) {
  list_subscores = other9.list_subscores;
  i_uid = other9.i_uid;
  str_name = other9.str_name;
  str_sex = other9.str_sex;
  __isset = other9.__isset;
  return *this;
}
void student::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "student(";
  out << "list_subscores="; (__isset.list_subscores ? (out << to_string(list_subscores)) : (out << "<null>"));
  out << ", " << "i_uid=" << to_string(i_uid);
  out << ", " << "str_name=" << to_string(str_name);
  out << ", " << "str_sex="; (__isset.str_sex ? (out << to_string(str_sex)) : (out << "<null>"));
  out << ")";
}


sturesult::~sturesult() throw() {
}


void sturesult::__set_i_uid(const int32_t val) {
  this->i_uid = val;
}

void sturesult::__set_str_name(const std::string& val) {
  this->str_name = val;
}

void sturesult::__set_str_sex(const std::string& val) {
  this->str_sex = val;
__isset.str_sex = true;
}

void sturesult::__set_i_subscore(const int32_t val) {
  this->i_subscore = val;
}

void sturesult::__set_i_avescore(const int32_t val) {
  this->i_avescore = val;
}

void sturesult::__set_str_maxsub(const std::string& val) {
  this->str_maxsub = val;
}

void sturesult::__set_str_mixsub(const std::string& val) {
  this->str_mixsub = val;
}

uint32_t sturesult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_i_uid = false;
  bool isset_str_name = false;
  bool isset_i_subscore = false;
  bool isset_i_avescore = false;
  bool isset_str_maxsub = false;
  bool isset_str_mixsub = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i_uid);
          isset_i_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_name);
          isset_str_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_sex);
          this->__isset.str_sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i_subscore);
          isset_i_subscore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i_avescore);
          isset_i_avescore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_maxsub);
          isset_str_maxsub = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_mixsub);
          isset_str_mixsub = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_i_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_str_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_i_subscore)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_i_avescore)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_str_maxsub)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_str_mixsub)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t sturesult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("sturesult");

  xfer += oprot->writeFieldBegin("i_uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->i_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->str_name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.str_sex) {
    xfer += oprot->writeFieldBegin("str_sex", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->str_sex);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("i_subscore", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->i_subscore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("i_avescore", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->i_avescore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_maxsub", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->str_maxsub);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_mixsub", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->str_mixsub);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(sturesult &a, sturesult &b) {
  using ::std::swap;
  swap(a.i_uid, b.i_uid);
  swap(a.str_name, b.str_name);
  swap(a.str_sex, b.str_sex);
  swap(a.i_subscore, b.i_subscore);
  swap(a.i_avescore, b.i_avescore);
  swap(a.str_maxsub, b.str_maxsub);
  swap(a.str_mixsub, b.str_mixsub);
  swap(a.__isset, b.__isset);
}

sturesult::sturesult(const sturesult& other10) {
  i_uid = other10.i_uid;
  str_name = other10.str_name;
  str_sex = other10.str_sex;
  i_subscore = other10.i_subscore;
  i_avescore = other10.i_avescore;
  str_maxsub = other10.str_maxsub;
  str_mixsub = other10.str_mixsub;
  __isset = other10.__isset;
}
sturesult& sturesult::operator=(const sturesult& other11) {
  i_uid = other11.i_uid;
  str_name = other11.str_name;
  str_sex = other11.str_sex;
  i_subscore = other11.i_subscore;
  i_avescore = other11.i_avescore;
  str_maxsub = other11.str_maxsub;
  str_mixsub = other11.str_mixsub;
  __isset = other11.__isset;
  return *this;
}
void sturesult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "sturesult(";
  out << "i_uid=" << to_string(i_uid);
  out << ", " << "str_name=" << to_string(str_name);
  out << ", " << "str_sex="; (__isset.str_sex ? (out << to_string(str_sex)) : (out << "<null>"));
  out << ", " << "i_subscore=" << to_string(i_subscore);
  out << ", " << "i_avescore=" << to_string(i_avescore);
  out << ", " << "str_maxsub=" << to_string(str_maxsub);
  out << ", " << "str_mixsub=" << to_string(str_mixsub);
  out << ")";
}


